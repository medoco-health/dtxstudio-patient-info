[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dtxstudio-patient-info"
version = "1.0.0"
authors = [
    {name = "medoco HEALTH", email = "info@medoco.health"},
]
description = "Clinical-grade patient information matching and updating system for DTX Studio"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["healthcare", "patient-matching", "clinical-informatics", "dtx-studio", "pms"]
dependencies = [
    "tqdm>=4.67.1,<5.0.0",
    "requests>=2.25.0",
    "urllib3>=1.26.0"
]

[project.scripts]
# Main entrypoints
dtxstudio-patient-updater = "dtxstudio_patient_info.entrypoint:main"
dtxstudio-patient-merge = "dtxstudio_patient_info.merge_patients:main"

# Utility scripts
test-clinical-framework = "test_clinical_framework:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["dtxstudio_patient_info1*", "dtxstudio_patient_info2*"]
exclude = ["tests*", "*.tests*", "*.tests.*", "tests.*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yaml", "*.yml", "*.json"]

# Development and testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "test_*.py",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "clinical: Clinical validation tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["dtxstudio_patient_info1", "dtxstudio_patient_info2"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
